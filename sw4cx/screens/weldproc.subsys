     define(`forloop',
            `pushdef(`$1', `$2')_forloop(`$1', `$2', `$3', `$4')popdef(`$1')')
     define(`_forloop',
            `$4`'ifelse($1, `$3', ,
                   `define(`$1', incr($1))_forloop(`$1', `$2', `$3', `$4')')')
     define(`fordown',
            `pushdef(`$1', `$2')_fordown(`$1', `$2', `$3', `$4')popdef(`$1')')
     define(`_fordown',
            `$4`'ifelse($1, `$3', ,
                   `define(`$1', decr($1))_fordown(`$1', `$2', `$3', `$4')')')
#---------------------------------------------------------------------

# Note: neither input nor display ranges are specified, because
#       this screen can be pointed to either true weldproc device (-10.0-+10.0)
#       or a cpoint-hierarchy with additional coefficients and, thus, different ranges
define(`WELD_LINE', `
    disp cur$1 "$1" text - - %7.4f cur$1
    knob beg$1 ""   text - - %7.4f beg$1
    knob end$1 ""   text - - %7.4f end$1
')

grouping main WeldProc "WeldProc" grid "noshadow" \
        coltitles:"Current\tBegin\tEnd" \
        ncols:3 nattl:3 content:eval(3 + 3*10 + 3) {

    disp   is_welding ""            led     r:is_welding
    disp   vdev_state "V_S"         text    r:vdev_state  dpyfmt:%2.0f
    button rst        "R"           button  r:reset_state

    WELD_LINE(0)
    WELD_LINE(1)
    WELD_LINE(2)
    WELD_LINE(3)
    WELD_LINE(4)
    WELD_LINE(5)
    WELD_LINE(6)
    WELD_LINE(7)
    WELD_LINE(8)
    WELD_LINE(9)

    knob   T     "T"   text noincdec - %5.2f time
    button start Start button r:do_start
    button stop  Stop  button r:do_stop
}

wintitle main "WeldProc"
winname  main weldproc
winclass main WeldProc
winopts  main ""
